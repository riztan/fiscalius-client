/** 
 * poslogin.xbs Este script se va a ejecutar luego de logearse al sistema.
 *              Podría decirse que es el verdadero inicio del sistema local.
 *
 */

// Nota: el uso de :: en los scripts es para manipular las variables dentro del objeto oForm.

#include "xbscripts/tpy_combobox.xbs"
#include "xbscripts/gempresa.xbs"

#include "tpy_xbs.ch"

procedure poslogin( oParent )
   Local oForm, tDbDateTime

   SET PUBLIC oForm

   oTPuy:cServer   := NETSERVER

   //--- Temas y personalizaciones.
   if oTpuy:cOS="WIN"
      ::cFont    := "Tahoma" //"Bradley Hand ITC"//"Chiller"//"Tahoma"
      ::lWin     := .T.
   else
      ::cFont    := "Arial Narrow"//"Liberation Sans Narrow"
      //::cFont    := "URW Chancery L"//"Liberation Sans Narrow"
      ::lWin     := .F.
   endif
   ::cFontName:= ::cFont + " " + ALLTRIM(STR( 11 ))

   //::SetTheme("Flattastic") 
   ::cStyle := 'style "user-font" {'+CRLF
   ::cStyle += 'font_name = "'+::cFontName+'" '+CRLF
   ::cStyle += '}'+CRLF+CRLF
   ::cStyle += 'class "*" style "user-font"'+CRLF
   ::cStyle += 'gtk-font-name="'+::cFontName+'"'+CRLF+CRLF

   gtk_rc_parse_string( ::cStyle )
   //--- Fin de temas y personalizaciones.

   ::aMsgs := {}

   oParent:oWnd:End()

   ::rSession      := oTPuy:rSession

   ::oEmpresas   := ::rSession:Empresas()  //-- cursor remoto de empresas.

   if !oTPuy:IsDef("rEmpresa")
      ::cEmpresaDefault := "001"  // Debe crearse el metodo remoto para obtener el valor de la empresa predefinida.
      ::rEmpresa := ::rSession:SetEmpresa(::cEmpresaDefault)

      oTPuy:Add("rEmpresa", ::rEmpresa )
   endif

   if hb_IsNIL( ::oEmpresas )
      MsgAlert( "Posiblemente se ha perdido la conexión con el servidor.","Problemas" )
      RETURN
   endif

   DEFINE EMPRESA   ::oGEmpresa ;  //oGEmpresa => Objeto Empresa con Componentes Gráficos.  Clase gEmpresa
          RSESSION  ::rSession  ;
          REMPRESA  ::rEmpresa


   //tDBDateTime := hb_SToT( STRTRAN(STRTRAN( STRTRAN(::rEmpresa:DBDateTime(),"-",""), " ", ""), ":", "") )
   tDbDateTime := hb_DateTime() // -- TODO: crear metodo para obtener el datetime del servidor de Base de Datos.

   //View( hb_TToS( hb_DateTime() ) )
   oTPuy:nDTFactor := hb_DateTime() - tDBDateTime //net:hb_DateTime()  // diferencia de fecha/hora en local y el servidor.
   oTPuy:bDTServer := {|| hb_DateTime() - oTPuy:nDTFactor }

//   ::oLangs:= ::rEmpresa:Langs()

   if !hb_DirExists( oTPuy:cTempDir+"empresas" )
      hb_DirCreate( oTPuy:cTempDir+"empresas" )
   endif

   ::cResFile := oTPuy:cResources+"main.ui"

   SET RESOURCES ::oRes FROM FILE ::cResFile

   DEFINE WINDOW oTpuy:oWnd  TITLE oTPuy:cSystem_Name ;
          SIZE 700,610 ;
          ICON_FILE oTPuy:cImages+"papaya.ico" ;
          ID "wnd_main" RESOURCE ::oRes
      
      //oTPuy:oWnd:SetResizable(.f.)

      DEFINE IMAGE ::oImgFondo ;
             FILE oTPuy:cImages+"fondo_fiscalius_3.jpg"; 
             ID "img_fondo" RESOURCE ::oRes

         ::oImgFondo:Adjust(1370)

      DEFINE BOX ::oBoxMenu ID "hbox_menu" RESOURCE ::oRes
      DEFINE BARMENU ::oBarMenu of ::oBoxMenu

        MENUBAR ::oMenu OF ::oBarMenu ID "menubar" RESOURCE ::oRes

           //MsgRun( "Cargando menu", {||oTPuy:RunXBS("menu", oForm)} )

/*
      DEFINE MENUITEM ACTION MsgInfo("En desarrollo");
             ID "itm_user" RESOURCE ::oRes

//      DEFINE MENUITEM ACTION oTPuy:RunXBS("shops", oForm) ; 
//             ID "itm_empresa" RESOURCE ::oRes

      DEFINE MENUITEM ACTION empresa_url( oForm ) ;
             ID "itm_www_empresa" RESOURCE ::oRes
 
*/
      DEFINE MENUITEM ACTION tpy_exit() ;
             ID "itm_quit" RESOURCE ::oRes

      DEFINE MENUITEM ACTION __About( oForm ) ;
             ID "itm_about" RESOURCE ::oRes

      //DEFINE MENUITEM ACTION View(::oGEmpresa:Help()) ;
      //DEFINE MENUITEM ACTION Prueba( oForm, ::oGEmpresa:Clientes({"filtro"=>"lact"})) ;
      //DEFINE MENUITEM ACTION View(::oGEmpresa:Methods()) ;
//      DEFINE MENUITEM ACTION Prueba( oForm, ::oGEmpresa:Clientes("lact")) ;

//      DEFINE MENUITEM ACTION View( ::oGEmpresa:setModulo("VENTAS"):Titulo()) ;
//      DEFINE MENUITEM ACTION Prueba( oForm, ::oGEmpresa:setModulo("VENTAS"):Clientes()) ;

   DEFINE MENUITEM ACTION oTPuy:RunXBS( "mae_usuarios", oForm, oTPuy:oWnd ) ;
             ID "item_usuarios" RESOURCE ::oRes
			 
    DEFINE MENUITEM ACTION oTPuy:RunXBS( "mae_medios_pago", oForm, oTPuy:oWnd ) ;
             ID "item_mediospag" RESOURCE ::oRes
			 
	DEFINE MENUITEM ACTION oTPuy:RunXBS( "mae_monedas", oForm, oTPuy:oWnd ) ;
             ID "item_monedas" RESOURCE ::oRes

    DEFINE MENUITEM ACTION oTPuy:RunXBS( "mae_alicuotas", oForm, oTPuy:oWnd ) ;
             ID "item_alicuotas" RESOURCE ::oRes
			 
      DEFINE MENUITEM ACTION oTPuy:RunXBS( "mae_inventario", oForm, oTPuy:oWnd ) ;
             ID "item_productos" RESOURCE ::oRes

      DEFINE MENUITEM ACTION oTPuy:RunXBS( "vta_clientes", oForm, oTPuy:oWnd ) ;
             ID "itm_clientes" RESOURCE ::oRes

      DEFINE MENUITEM ACTION oTPuy:RunXBS("vta_facturas", oForm );  
             ID "itm_transacciones" RESOURCE ::oRes

      DEFINE MENUITEM ACTION oTPuy:RunXBS("vta_notas_cd", oForm, "C" );  
             ID "itm_notacredito" RESOURCE ::oRes

      DEFINE MENUITEM ACTION oTPuy:RunXBS("vta_notas_cd", oForm, "D" );  
             ID "itm_notadebito" RESOURCE ::oRes

      DEFINE MENUITEM ACTION oTPuy:RunXBS("vta_notas_cd", oForm, "E" );  
             ID "itm_notaentrega" RESOURCE ::oRes

/*
      DEFINE MENUITEM ACTION oTPuy:RunXBS( "theme", oForm ) ;
             ID "itm_theme" RESOURCE ::oRes

      DEFINE MENUITEM ACTION oTPuy:RunXBS( "test_comboshop", oForm, ::rSession, ::rEmpresa ) ;
             ID "itm_compras" RESOURCE ::oRes

      DEFINE MENUITEM ACTION oTPuy:RunXBS( "compras", oForm ) ;
             ID "itm_compras" RESOURCE ::oRes



      DEFINE TOOLBUTTON ::oTBPOS ;
             ACTION oTPuy:RunXBS( "pos", oForm ) ;
             ID "tb_pos" RESOURCE ::oRes
      
      DEFINE TOOLBUTTON ::oTBWWW ;
             ACTION empresa_url( oForm ) ;
             ID "tb_url" RESOURCE ::oRes
*/
      DEFINE TOOLBUTTON ::oTBQuit ;
             ACTION tpy_exit()    ;
             ID "tb_quit" RESOURCE ::oRes

      empresa_Navegacion( oForm, ::oEmpresas )

      DEFINE BOX ::oBoxMsgs   ID "box_msgs"   RESOURCE ::oRes
      DEFINE LABEL ::oLabMsgs ID "lab_msgs"   RESOURCE ::oRes

/*
      DEFINE BOX ::oBoxMidle  ID "box_midle"  RESOURCE ::oRes
      DEFINE NOTEBOOK ::oNBook OF ::oBoxMidle FILL EXPAND POSITION 2

      DEFINE BOX ::oBoxBottom ID "box_bottom" RESOURCE ::oRes
*/

      DEFINE STATUSBAR ::oStatusBar ;
             TEXT "" ;  //oTPuy:cSystem_Name + " | Hora: "+oTPuy:cTime ;
             ID "status_bar" RESOURCE ::oRes ;

      oTPuy:oStBar := TStatusBar():New( ::oStatusBar )
      __SetInfo()

   ACTIVATE WINDOW oTPuy:oWnd INITIATE CENTER VALID tpy_exit(oForm)

return


// PRUEBA -- Ejemplo para visualizar el contenido de un cursor remoto.
procedure Prueba( oForm, oRCursor )

   DEFINE MODEL ::oModclientes ;
          STRUCT oRCursor:Struct ;
          DATA   oRCursor:Data()

   DEFINE LISTBOX ::oLBClientes MODEL ::oModClientes ;
          SIZE 200,200

   ::oLBClientes:Active()  

return



/** Abrir la URL de la empresa
 */
procedure empresa_url( oForm )
   if oTPuy:cOS="WIN" 
      WAPI_ShellExecute(0,0, ::oGEmpresa:cUrl )
   else
      winexec("firefox " + ::oGEmpresa:cUrl )   
   endif
return



/** Establece valores iniciales en la barra de estado.
 */
#define SEPARATOR  " "+CHR(199)+CHR(129)+" "
static procedure __SetInfo()

   oTPuy:oStBar:Add( "username",{|| +;
                                    oTPuy:oUser:cNombre + " " }  )
//   oTPuy:oStBar:Add( "username",{|| +;
//                                    "Nombre del usuario" + " " }  )
   oTPuy:oStBar:Add( "date"   , {|| SEPARATOR+DTOC(Date()) } )
   oTPuy:oStBar:Add( "time"   , {|| SEPARATOR+LEFT( TIME(), 5 ) } )

return



/** Pantalla Acerca de.
 *
 */
procedure __About( oForm )

   local oAbout 

   SET RESOURCES ::oRes FROM FILE oTPuy:cResources+"main.ui"
   DEFINE ABOUT ::oWndAbout ;
          ID "about" RESOURCE ::oRes ;
          OF oTPuy:oWnd

   if oTPuy:cOS="WIN"
      DEFINE BUTTON ::oLinkTPY ;
             ACTION WAPI_ShellExecute(0,0,"https://riztan.wordpress.com") ;
             ID "link_tpuy" RESOURCE ::oRes

   endif

   ::oWndAbout:SetSkipTaskBar(.t.)

   ACTIVATE DIALOG ::oWndAbout
return



/** Muestra un mensaje en el contenedor creado para ello.
 *  Con esto evitamos crear dialogos y quizás se prepara
 *  la interfaz para adaptaciones futuras.
 */
procedure __TpyMsg( oForm, cMsg, cTitle )
   local nPos

   default cTitle := "Información."
   default cMsg   := oTPuy:cSystem_Name

   AADD( ::aMsgs, NIL )
   nPos := LEN( ::aMsgs )   

   //DEFINE FRAME ::oFmMsg TEXT cTitle;
   DEFINE FRAME ::aMsgs[nPos] TEXT cTitle;
          SHADOW 1 EXPAND FILL ;
          OF ::oBoxMsgs SIZE 60,60
   DEFINE BOX ::oBoxMsg CONTAINER EXPAND FILL OF ::aMsgs[nPos]
   DEFINE LABEL ::oLabMsg TEXT cMsg ;
          MARKUP EXPAND FILL ;
          OF ::oBoxMsg
   DEFINE BUTTON ::oBtnmsgs TEXT "Cerrar";
          ACTION ( ::aMsgs[nPos]:End() ) ;
          OF ::oBoxMsg

   ::oBtnMsgs:SetFocus()
return



/** Elimina todos los mensajes existentes.
*/
procedure __TpyDelMsgs( oForm )
   local oMsg
   FOR EACH oMsg IN ::aMsgs
      if hb_IsObject(oMsg)
         oMsg:End()
      endif
      //hb_ADel( ::aMsgs[ oMsg:__EnumIndex() ] )
   NEXT
   ::aMsgs := {}
return



/** Componente de navegación (asi le dicen los desarrolladores web)
 */
procedure empresa_Navegacion( oForm, oEmpresas ) //, oLangs )
   local aEmpresas, aEmpresa, aLangs, aLang
   local oLangs, oRes

   empresa_ComboBox( oForm, oEmpresas )
   modulo_ComboBox( oForm )

return



/** Componente tipo combo con lista de empresas
 */
procedure empresa_ComboBox( oForm, oEmpresas )
   local aEmpresas := {}, aEmpresa, nEmpresas

   nEmpresas := oEmpresas:RecCount()

   ::cCBEmpresa := ""

   //-- Array de Empresas
   if nEmpresas > 1
      AADD( aEmpresas, "Todas" )
   elseif nEmpresas = 1
      ::rEmpresa     := ::rSession:setEmpresa( oEmpresas:codigo )
      oTPuy:rEmpresa := ::rEmpresa
      ::cCBEmpresa   := oEmpresas:nombre 
   endif

//   FOR EACH aEmpresa IN oEmpresas:GetData()
//      AADD( aEmpresas, ALLTRIM(aEmpresa[6]) )
//   NEXT

   DEFINE BOX ::oBoxEmpresa ID "box_empresa" RESOURCE ::oRes

   DEFINE TPY_COMBOBOX ::oCBEmpresas ;
          VAR ::cEmpresaName  ;
          ITEMS ::oGEmpresa:aEmpresas   ;
          ON CHANGE  ::oGEmpresa:SetEmpresa( ::oCBEmpresas:GetValue(), .t. /* desde el combobox*/, ::oLabMsgs )  ; 
          OF ::oBoxEmpresa

          //VAR ::oGEmpresa:cEmpresaName  ;
   // Asignamos el combobox como el correspondiente a la empresa en el objeto oGEmpresa
   ::oGEmpresa:SetComboboxEmpresa( @::oCBEmpresas ) // Es mejor que la clase GEmpresa proporcione el combobox
                                           // y asi la clase gestiona el estado del combobox. 
                                           // disable() si no se puede actualizar y viceversa

return


/** Componente tipo combo con lista de modulos
 */
procedure modulo_ComboBox( oForm )
   local aModulos := {}, aModulo, nModulo, cModulo

   //aModulos := ::oGEmpresa:Modulos()
   //nModulos := LEN( aModulos )

   ::cCBModulo := ""

//View( ::rEmpresa )
//View( (::rEmpresa:help() ))

//return
   FOR EACH cModulo IN ::oGEmpresa:Modulos()
      AADD( aModulos, ::oGEmpresa:setModulo(cModulo):Titulo() )
   NEXT

   nModulos := LEN( aModulos )

   //-- Array de Modulos
   if nModulos = 1
      ::rModulo     := ::oGEmpresa:setModulo( aModulos[1] )
      oTPuy:rModulo := ::rModulo
//      ::cCBModulo   := "aqui"
   endif

   DEFINE BOX ::oBoxModulo ID "box_modulo" RESOURCE ::oRes

   DEFINE TPY_COMBOBOX ::oCBModulos ;
          VAR ::cModuloName  ;
          ITEMS aModulos   ;
          ON CHANGE  ::oGEmpresa:SetModulo( ::oCBModulos:GetValue(), .t. /* desde el combobox*/, ::oLabMsgs )  ; 
          OF ::oBoxModulo

   if nModulos = 1 ; ::oCBModulos:Disable() ; endif

   // Asignamos el combobox como el correspondiente a la Modulo en el objeto oGModulo
   //::oGModulo:SetComboboxModulo( @::oCBModulos ) // Es mejor que la clase GModulo proporcione el combobox
                                           // y asi la clase gestiona el estado del combobox. 
                                           // disable() si no se puede actualizar y viceversa

return

//eof
