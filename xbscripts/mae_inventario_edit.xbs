/* mae_inventario_edit.xbs
 *
 */

//#include "tpy_xbs.ch"

procedure inv_edit( oForm, oInvWnd, oModel, rInventario, lNew )
   local oWnd, oRes, oImgBanner
   local oInvForm, hData, rProducto, oAlicuotas, aAlicuotas := {}

   default lNew := .T.

   SET PUBLIC oInvForm

   oInvForm:oInvWnd    := oInvWnd
   oInvForm:oModel     := oModel
   oInvForm:lForce     := .F.
   oInvForm:lClose     := .F.     //Bandera para indicar cierre
   oInvForm:oModel     := oModel
   oInvForm:rSession   := ::rSession
   oInvForm:rInventario:= rInventario
   oInvForm:lNew       := lNew

   if lNew

      oInvForm:cCodigo  := ""
      //oInvForm:cNombre  := ""
   else

      oInvForm:cCodigo  := oModel:GetCol( 4 )
   endif

//View( oInvForm:cCodigo )
   oInvForm:rProducto := rInventario:Producto( {"codigo_local" => oInvForm:cCodigo} )
//View( rInventario:Producto( oInvForm:cCodigo ) )
//View( rProducto:ClassName() )

   oInvForm:hData := oInvForm:rProducto:Data()
//   oInvForm:cDescripcion := oInvForm:hData["descripcion"]
//   oInvForm:cCodigo_barras := oInvForm:hData["codigo_barras"]
   oInvForm:lIVA := .t. //iif( oInvForm:hData["incluye_iva"]="S", .T., .F. )
//View( oInvForm:hData )

   oAlicuotas := ::oGEmpresa:Alicuotas()
   if !hb_isObject( oAlicuotas )
      MsgStop( "Hay problema para obtener la lista de alicuotas" )
      return 
   endif 

   oAlicuotas:GoTop()
   While !oAlicuotas:Eof()

      AADD( aAlicuotas, oAlicuotas:tipo_tasa ) 
      oAlicuotas:Skip()
   EndDo
//View( aAlicuotas )
//return

   SET RESOURCES oRes FROM FILE oTPuy:cResources+"mae_inventario.ui"

   DEFINE WINDOW oInvForm:oWnd TITLE "Pruebas" SIZE 880,500 ;
          OF oInvWnd ;
          ID "window1" RESOURCE oRes

      DEFINE IMAGE oInvForm:oImgBanner ID "img_banner" RESOURCE oRes
      oInvForm:oImgBanner:Adjust(900,100)

      DEFINE IMAGE oInvForm:oImgLogo   ID "img_logo"   RESOURCE oRes
      oInvForm:oImgLogo:Adjust(60)

      oInvForm:cCodGlobalIni := oInvForm:hData["codigo_global"]
      DEFINE ENTRY oInvForm:oEntCodigoG VAR oInvForm:hData["codigo_global"] ;
             VALID iif( oInvForm:lClose, .T., __MaeValCodigo( oInvForm:oEntCodigoG, oInvForm, "global" ) ) ;
             ID "ent_codigo_global" RESOURCE oRes

      oInvForm:cCodLocalIni := oInvForm:hData["codigo_local"]
      DEFINE ENTRY oInvForm:oEntCodigo VAR oInvForm:hData["codigo_local"] ;
             VALID iif( oInvForm:lClose, .T., __MaeValCodigo( oInvForm:oEntCodigo, oInvForm, "local" ) ) ;
             ID "ent_codigo" RESOURCE oRes

      DEFINE ENTRY oInvForm:oEntCodBar VAR oInvForm:hData["codigo_barras"] ;
             ID "ent_codigo_barra" RESOURCE oRes

//      DEFINE ENTRY oInvForm:oEntNombreC VAR oInvForm:cNombreC ID "ent_nombre_corto" RESOURCE oRes
/*
      DEFINE ENTRY oInvForm:oEntTasa VAR oInvForm:hData["tipo_tasa"] ;
             VALID iif( oInvForm:lClose, .T., __ValidaTasa( oInvForm:oEntTasa ) ) ;
             ID "ent_tasa" RESOURCE oRes
*/
      DEFINE BOX oInvForm:oBoxTasas ID "hbox_tasas" RESOURCE oRes
      DEFINE COMBOBOX oInvForm:oCBTipoTasa VAR oInvForm:hData["tipo_tasa"] ITEMS aAlicuotas ;
             OF oInvForm:oBoxTasas

      DEFINE ENTRY oInvForm:oEntTipo    VAR oInvForm:hData["tipo_inventario"]    ;
             VALID iif( oInvForm:lClose, .T., __ValidaTipo(oInvForm:oEntTipo, oInvForm) ) ;
             ID "ent_tipo"    RESOURCE oRes

      DEFINE ENTRY oInvForm:oEntNombre  VAR oInvForm:hData["nombre"]    ;
             ID "ent_nombre"  RESOURCE oRes

      DEFINE ENTRY oInvForm:oEntDescriG  VAR oInvForm:hData["descripcion_global"]    ;
             ID "ent_descripcion_global"  RESOURCE oRes

      DEFINE ENTRY oInvForm:oEntDescri  VAR oInvForm:hData["descripcion_local"]   ;
             ID "ent_descripcion_local"  RESOURCE oRes

      DEFINE CHECKBOX oInvForm:oCheck_iva VAR oInvForm:hData["incluye_iva"] ; //oInvForm:lIVA ;
             ID "check_iva" RESOURCE oRes

//      DEFINE CHECKBOX oInvForm:oCheck_imppvp VAR oInvForm:lImpPvp ;
//             ID "check_imppvp" RESOURCE oRes
      DEFINE MONEY ENTRY oInvForm:oEntImpPvp VAR oInvForm:hData["imp_pvp"] ;
             ID "ent_imppvp"  RESOURCE oRes

      DEFINE TEXTVIEW oInvForm:oVTDetal VAR oInvForm:hData["descripcion_detallada"] ;
             ID "tv_detal"  RESOURCE oRes

      DEFINE MONEY ENTRY oInvForm:oEntPrecio VAR oInvForm:hData["precio_unitario"] ;
             ID "ent_precio"  RESOURCE oRes

      DEFINE INTEGER ENTRY oInvForm:oEntStockMin VAR oInvForm:hData["stock_minimo"] ;
             ID "ent_stock_minimo"  RESOURCE oRes

      DEFINE INTEGER ENTRY oInvForm:oEntStock VAR oInvForm:hData["stock_total"] ;
             ID "ent_stock"  RESOURCE oRes

/*
      DEFINE ENTRY oInvForm:oEntMail   VAR oInvForm:cMail   ;
             VALID iif( oInvForm:lClose, .T., __ValidaEmail( oInvForm:oEntMail ) ) ;
             ID "ent_mail"   RESOURCE oRes

      DEFINE ENTRY oInvForm:oEntTlf    VAR oInvForm:cTlf    ;
             VALID iif( oInvForm:lClose, .T., __ValidaTlf( oInvForm:oEntTlf ) ) ;
             ID "ent_tlf"    RESOURCE oRes

      DEFINE TEXTVIEW oInvForm:oVTDir  VAR oInvForm:cDir    ID "tv_dir"     RESOURCE oRes
*/
      DEFINE BUTTON oInvForm:oBtnSave   ACTION __MaeInvSave( oInvForm ) ID "btn_save" RESOURCE oRes

      DEFINE BUTTON oInvForm:oBtnCancel ACTION ( oInvForm:lClose := .T., oInvForm:oWnd:End() ) ;
             ID "btn_cancel" RESOURCE oRes

   ACTIVATE WINDOW oInvForm:oWnd MODAL VALID __MaeInvExit( oInvForm )

return



Procedure __MaeInvSave( oForm )
   local hData, uWidget, uResp, aIter, lNew
   local cCol

/*
   if !__ValidaTipo( ::oEntTipo, oForm )
      MsgAlert("El RIF ingresado es inválido. Debe tener el formato X-12345678-D (ej. J-12345678-9).", "Error")
      ::oEntRif:SetFocus()
      return
   endif
*/

   lNew := ::rProducto:isNew()

   if lNew
      //::hData["tipo"         ] := "P" // (P)roducto
      ::hData["unidad_medida"] := "UNIDAD"
   endif

   /* Algunas validaciones previas */
   hData := ::hData

//   if VALTYPE( ::hData["incluye_iva"] )="C"
//      hData["incluye_iva"] :=  iif( ALLTRIM(Upper(::hData["incluye_iva"]))="S",.T.,.F. )
//   endif

   FOR EACH cCol IN {"precio_unitario","stock_total","stock_minimo","imp_pvp","codigo_barras"}
      if VALTYPE( hData[ cCol ] )="C"
         hData[ cCol ] := VAL( ::hData[cCol] )
      endif
   NEXT

   // Guardar los datos del producto
   //hData := ::rProducto:Data()
   ::rProducto:SetData( hData )

   uResp := ::rProducto:Save()

   if !(ValType( uResp ) = "L" .and. uResp = .T.)
      MsgAlert("No se pudo guardar el producto.", "Error")
      return
   endif

   //- Atualizar el modelo de datos de la ventana con la lista de productos.

   hData := ::rProducto:Data()
//View( hData )
   // Verificar si es un producto nuevo (no hay selección en el modelo)
   if lNew 
      // Cliente nuevo: añadir una nueva fila al modelo
      aIter := ARRAY(4)
      APPEND LIST_STORE ::oModel:oLbx ITER aIter ;
             VALUES hb_ntos(hData["inventario_id"    ]), ; //1
                    hb_ntos(hData["empresa_id"       ]), ; //2
                    hData["codigo_global"            ], ; //3
                    hData["codigo_local"             ], ; //4
                    hData["descripcion_local"        ], ; //5
                    hData["descripcion_global"       ], ; //6
                    hData["tipo_inventario"          ], ; //7
                    hData["tipo_tasa"                ], ; //8
                    hb_ntos(hData["iva_porcentaje"   ]), ; //9
                    hb_ntos(hData["precio_unitario"  ]), ; //10
                    hb_ntos(hData["stock_total"      ]), ; //1
                    hb_ntos(hData["stock_minimo"     ]), ; //2
                    hb_ntos(hData["costo_unitario"   ]), ; //3
                    "",; //hData["activo"                   ], ; //4
                    hData["fecha_creacion_inventario"], ; //5
                    "",; //hData["detalle_id"               ], ; //6
                    "",; //hData["almacen_id"               ], ; //7
                    "",; //hData["ubicacion"                ], ; //8
                    "0" ,; //hData["stock_parcial"            ], ; //9
                    "",; //hData["lote"                     ], ; //20
                    "",; //hData["fecha_vencimiento"        ], ; //1
                    "",; //hData["equivalencia_id"          ], ; //2
                    "",; //hData["detalles_json"            ], ; //3
                    "0",; //hData["precio_full"              ], ; //4
                    "",; //hData["incluye_iva"              ], ; //6
                    hb_ntos(hData["imp_pvp"                  ])   //7
                    

      // Establecer el cursor en la nueva fila
      gtk_tree_view_set_cursor( ::oModel:oTreeView:pWidget, ::oModel:oTreeView:GetPath( aIter ), NIL, .F. )
   else
      // Cliente existente: actualizar la fila seleccionada
//TODO: Actualizar correctamente estos valores, algunos explotan, hay que validar tipo de dato, etc
      ::oModel:SetValue(  4, hData["codigo_local"     ] )
      ::oModel:SetValue(  5, hData["descripcion_local"] )
      ::oModel:SetValue(  8, hData["tipo_tasa"        ] )
      //::oModel:SetValue(  9, hData["iva_porcentaje"   ] )
//      ::oModel:SetValue( 10, hData["precio_unitario"  ] )
      //::oModel:SetValue( 14, hData["activo"           ] )
      //::oModel:SetValue( 25, hData["fecha_creacion_inventario"] )
//      ::oModel:SetValue( 26, hData["incluye_iva"      ] )
      //::oModel:SetValue( 27, hData["imp_pvp"          ] )
   endif

   // Actualizar los campos del formulario
/*
   ::oEntCodigo:SetValue( hData["codigo"] )
   ::oEntNombre:SetValue( hData["nombre"] )
   ::oEntNombreC:SetValue( hData["nombre_corto"] )
   ::oEntCedula:SetValue( hb_ntos(hData["cedula"]) )
   ::oEntRif:SetValue( hData["rif"] )
   ::oEntMail:SetValue( hData["email"] )
   ::oEntTlf:SetValue( hData["telefono"] )
   ::oVTDir:SetValue( hData["direccion"] )
*/
   ::lForce := .T.
   ::oWnd:End()

return



Function __MaeValCodigo( oEntCodigo, oForm, cType )
   local cCodigo, lReturn, lCheck

   cCodigo := oEntCodigo:GetValue()

   // No Permitir código vacío 
   if Empty( cCodigo )
      MsgAlert( "Debe indicar un código para este cliente.", "Atención" )
      return .F.
   endif

   // Verificar longitud (3 a 15 dígitos)
   if LEN( cCodigo ) < 3 .OR. LEN( cCodigo ) > 15
      MsgAlert("El código debe tener entre 3 y 15 dígitos.", "Error")
      oEntCodigo:SetFocus()
      return .F.
   endif

   if cType == "global"
//::cCodGlobalIni := oInvForm:hData["codigo_global"]
//View(::hData["codigo_global"])
      lCheck  := ALLTRIM(::cCodGlobalIni) != ALLTRIM(cCodigo)
      lReturn := ::rInventario:GlobalExist( cCodigo )["return"]
   else
//View( ::cCodLocalIni )
      lCheck  := ALLTRIM(::cCodLocalIni) != ALLTRIM(cCodigo)
      lReturn := ::rInventario:LocalExist( cCodigo )["return"]
   endif

//View( lCheck )
   if ::rProducto:isNew() .OR. ( !::rProducto:isNew() .AND. lCheck )
      //::cCodLocalIni := oInvForm:hData["codigo_local"]
      //lReturn := iif( cType="global", ::rInventario:GlobalExist( cCodigo )["return"], ;
      //                                ::rInventario:LocalExist( cCodigo )["return"] )
      if lReturn 
         MsgAlert( "El código ingresado ya está registrado", "Atención" )
         oEntCodigo:SetText('')
         oEntCodigo:SetFocus()
         Return .F.
      endif
   endif

Return .T.




Function __ValidaTipo( oEntTipo, oForm )
   local cCleanTipo, cTipo

   cTipo := oEntTipo:GetValue()
   // Normalizar: eliminar guiones y convertir a mayúsculas
   cCleanTipo := UPPER( STRTRAN( cTipo, "-", "" ) )

   return .T.



Function __ValidaEmail( oEntMail )
   local cMailLower, nAtPos, nDotPos
   local cValidChars := "abcdefghijklmnopqrstuvwxyz0123456789.-_@"
   local i, cMail

   cMail := oEntMail:GetValue()

   // Permitir email vacío (opcional)
   if Empty( cMail )
      return .T.
   endif

   // Convertir a minúsculas para simplificar validación
   cMailLower := LOWER( cMail )

   // Verificar longitud (mínimo 5, máximo 100 caracteres)
   if LEN( cMailLower ) < 5 .OR. LEN( cMailLower ) > 100
      MsgAlert("El correo electrónico debe tener entre 5 y 100 caracteres.", "Error")
      oEntMail:SetFocus()
      return .F.
   endif

   // Verificar presencia de exactamente un @
   nAtPos := AT( "@", cMailLower )
   if nAtPos == 0 .OR. AT( "@", SUBSTR( cMailLower, nAtPos + 1 ) ) > 0
      MsgAlert("El correo electrónico debe contener exactamente un símbolo @.", "Error")
      oEntMail:SetFocus()
      return .F.
   endif

   // Verificar presencia de al menos un punto después del @
   nDotPos := AT( ".", SUBSTR( cMailLower, nAtPos + 1 ) )
   if nDotPos == 0
      MsgAlert("El correo electrónico debe contener un dominio con extensión (ej. .com).", "Error")
      oEntMail:SetFocus()
      return .F.
   endif

   // Verificar que no haya puntos consecutivos ni al inicio/final de la parte local
   if AT( "..", cMailLower ) > 0 .OR. LEFT( cMailLower, 1 ) == "." .OR. SUBSTR( cMailLower, nAtPos - 1, 1 ) == "."
      MsgAlert("El correo electrónico no puede contener puntos consecutivos ni empezar/terminar con un punto antes del @.", "Error")
      oEntMail:SetFocus()
      return .F.
   endif

   // Verificar caracteres básicos permitidos (letras, números, puntos, guiones, guiones bajos)
   for i := 1 TO LEN( cMailLower )
      if ! ( SUBSTR( cMailLower, i, 1 ) $ cValidChars )
         MsgAlert("El correo electrónico contiene caracteres no permitidos.", "Error")
         oEntMail:SetFocus()
         return .F.
      endif
   next

   return .T.



Function __ValidaTlf( oEntTlf )
   local cPhone

   cPhone := oEntTlf:GetValue()

   // Permitir teléfono vacío (opcional)
   if Empty( cPhone )
      return .T.
   endif

   // Verificar que solo contenga dígitos
   if ! IsDigit( cPhone )
      MsgAlert("El número de teléfono debe contener solo dígitos.", "Error")
      oEntTlf:SetFocus()
      return .F.
   endif

   // Verificar longitud (7 a 15 dígitos)
   if LEN( cPhone ) < 7 .OR. LEN( cPhone ) > 15
      MsgAlert("El número de teléfono debe tener entre 7 y 15 dígitos.", "Error")
      oEntTlf:SetFocus()
      return .F.
   endif

   return .T.


/*
Function __ValidaTasa( oEntTasa )
   local cTasa

   cTasa := oEntTasa:GetValue()

   // Permitir cédula vacía (opcional)
   if Empty( cTasa )
      return .T.
   endif

   // Verificar que solo contenga dígitos

   if ! IsDigit( cTasa )
      MsgAlert("La Tasa debe contener solo dígitos.", "Error")
      oEntTasa:SetFocus()
      return .F.
   endif

   return .T.
*/


Function __MaeInvExit( oForm )

  ::lClose := .T. //Activar bandera de cierre antes de validar salida
//View( ::lForce )
  if ::lForce; return .T. ; endif

  if MsgNoYes("¿Desea salir y descartar los cambios?", "Atención.")
     return .T.
  endif

return .F.

//eof
