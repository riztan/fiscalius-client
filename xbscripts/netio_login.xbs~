/*
 * netio_login: Realiza ingreso de usuario a sistema TPuy.
 */

//#include "xbscripts/rsession.xbs"
//#include "xbscripts/tstatusbar.xbs"

#include "xbscripts/guser.xbs"

#include "tpy_xbs.ch"


function netio_login( oWnd )

   Local lConnect:=.f.
   Local oForm, setting 


   if oTPuy:IsDef("oWnd") .AND. IsObject(oTpuy:oWnd)
      // evitamos iniciar login si la ventana principal está ya activa.
      return nil
   endif

   DEFINE oForm PUBLIC

   if oTpuy:IsDef("oUser") .AND. IsObject(oTpuy:oUser)
      return .t.
   endif
   
   ::cResFile := oTpuy:cResources+"login.ui"

   SET RESOURCES ::oResource FROM FILE ::cResFile

   DEFINE WINDOW ::oWnd ; //oTPuy:oWnd ;
          TITLE oTPuy:cSystem_Name+" Ingresar" ;
          ICON_FILE oTPuy:cIconMain ;
          OF oTpuy:oWnd ;
          ID "window1" RESOURCE ::oResource
          //SIZE 350,312 ;

      DEFINE BOX ::oBoxLogin ID "vbox1" RESOURCE ::oResource
      DEFINE BOX ::oBox ID "vbox4" RESOURCE ::oResource

      DEFINE ENTRY ::oEntUser VAR ::cUser ;
             ID "user" RESOURCE ::oResource

      DEFINE ENTRY ::oPasswd VAR ::cPasswd ;
             ID "passwd" RESOURCE ::oResource

      DEFINE BUTTON ::oBtnConnect ;
             ACTION login_Run( oForm ) ;
             ID "btn_connect" RESOURCE ::oResource

             //ACTION ( oTpuy:RunXBS("netio_table"), ::oWnd:End() ) ;

      DEFINE IMAGE ::oImgLogo FILE oTpuy:cImages+"fiscalius_logo_2.png" ; 
             ID "image8" RESOURCE ::oResource

         ::oImgLogo:Adjust(250)


      DEFINE IMAGE ::oImgInvited FILE oTpuy:cImages+"photographer_32.png" ; 
             ID "image5" RESOURCE ::oResource

      DEFINE BUTTON ::oBtnExit ;
             ACTION ( netio_disconnect(NETSERVER, NETPORT),;
                      tpy_exit(oForm) ) ;
             ID "btn_exit" RESOURCE ::oResource

      DEFINE BUTTON ::oBtnRegistro ;
             TEXT " Ingresar como invitado " ;
             ACTION  login_Run(oForm, .t.) ; //( oTpuy:RunXBS("netio_registro", oForm ) );
             ID "btn_registro" RESOURCE ::oResource

             //::oBtnRegistro:Hide()

   ACTIVATE WINDOW ::oWnd CENTER //VALID tpy_exit(oForm)

Return 



function tpy_exit( oForm )
//   netio_disconnect( NETSERVER, NETPORT )
   oTPuy:lExit := .t.
//   tpyLogout( cUser )
   oTPuy:Exit()
   Salir()
return .t.



function login_Run( oForm, lNoUser )
   Local cScript
   Local cLogin

   default lNoUser := .f.

   cLogin  := ::oEntUser:GetText()
   cScript := cLogin
   if empty(cScript) ; cScript := "netio_table" ; endif

   if lNoUser
      // Usuario de visita, asignamos un usuario y clave.
      ::oEntUser:SetText("invitado")
      ::oPasswd:SetText("invitado")
   endif

   if Empty( ::oPasswd:GetText() ) 
      MsgAlert( "Debe incluir una contraseña.","Atención" )
      return .f.
   else
      //view(cLogin)
/*
      if !net:tps_IsLogin( cLogin )
         MsgAlert( "El valor de usuario [<b>" + cLogin + "]</b>. " + ;
                   "No es válido. ", "Valor Incorrecto" MARKUP )
         ::oEntUser:SetFocus()
         Return .f.
      else
*/
         if !login_IsUser(oForm)
            return .f.
//         endif
      endif

   endif

   oTpuy:RunXBS("poslogin", oForm )

return .t.



function login_IsUser(oForm)
   local cUser, cPasswd, cHome := "default" 
   local oUser,cAux, hSession, hUserData, hMsgContent

   cUser := ::oEntUser:GetText()
   cPasswd := hb_crypt(::oPasswd:GetText(), oTPuy:cPassword ) //hb_MD5( ::oPasswd:GetText() )

   /* Si ya estaba un usuario registrado... entonces.. hay que cerrar la sesion. */
   if oTPuy:IsDef("oUser") .and. hb_IsObject( oTPuy:oUser )
      if oTpuy:oUser:cLogin = cUser
         MsgInfo("Esta sesión corresponde al usuario ["+cUser+"]")
         return .f.
      endif
      TpyLogout( oTpuy:oUser:cLogin )
   endif

   /* oUser es el identificador del objeto remoto..
    * para enviar o recibir algo del objeto remoto usar:
    * ~~oUser:<mensaje> ó r:oUser:<mensaje>  */
   hSession := ~ServerLogin( cUser, cPasswd, "127.0.0.1", cHome /*TODO# Detectar IP*/ )

//View( hb_valtoexp(hSession) )

#xtranslate <message>.<value>  =>  <message>\[#<value>\]

   if tps_isMessage( hSession ) .and. hSession.ok //hSession["ok"]
      hMsgContent := hSession.content 
      oUser := hMsgContent.session_id 
      //oUser := hSession["content"]["session_id"]
      hUserData := hMsgContent.user_data
   endif

   // Ahora se debe registrar el objeto oUser localmente
   // para que tpuy siempre esté mandando el identificador
   // y se pueda recibir respuesta del servidor.

   if hb_IsNil( oUser ) .or. ( VALTYPE( oUser)="L" .and. !oUser )
      return .f. 
   endif

   if !oTpuy:IsDef( "oUser" ) .or. !hb_IsObject( oTPuy:oUser )

      // Creamos el objeto local correspondiente al usuario.
      oTPuy:oUser    := gUser():New( oUser, ;
                                     cUser, ;
                                     hUserData.nombre, ;
                                     hUserData.nombre_corto )

      oTPuy:rSession := RSession():New( oTPuy:oUser )

   endif

Return .t.



FUNCTION tpyLogout( cUser )
   local lRet := .f.
   local uValue, oMsgRun

   oMsgRun := MsgRunStart("Cerrando Objetos de la Sesión")

      inkey(.5)
      FOR EACH uValue IN oTpuy:oUser:hVars
         If hb_IsObject(uValue)
            uValue:End()
         EndIf
      NEXT 

      if hb_IsObject( oTPuy:oUser )
         lRet := ~ServerLogout( cUser )
         oTpuy:Del("oUser") 
         tracelog("Eliminado el objeto oTpuy:oUser")
      endif

   MsgRunStop(oMsgRun)
   
RETURN lRet


//EOF
