/* vta_clientes.xbs
 *
 */

#include "tpy_xbs.ch"

procedure vta_clientes( oForm, oWndParent, oEntParent, cCodCliente, cFiltro, cDocumento )

   local oCliWnd, oRes, oImgBanner, oImageLogo, oBoxData
   local oLabTitulo, cLabTitulo := "Clientes"
   local rVentas, rClientes, oModClientes, oLBoxCli, hParam

   default cCodCliente to ""
   default cFiltro     to ""
   default cDocumento  to ""

   if !Empty(cDocumento) .or. !Empty(cFiltro)
      hParam := hb_hash()
   endif

   if !Empty( cDocumento )
      hParam["documento"] := cDocumento
   endif
   if !Empty( cFiltro )
      hParam[ "filtro" ] := cFiltro
   endif

   rVentas := ::oGEmpresa:SetModulo("Ventas")
   rClientes := rVentas:Clientes( hParam )

   if hb_isNIL(rClientes)
      MsgStop("???")
      return
   endif


   SET RESOURCES oRes FROM FILE oTPuy:cResources+"vta_listbox.ui"


   DEFINE WINDOW oCliWnd ;
          TITLE "Fiscalius. Factura" ;
          SIZE 700,400 ;
          ID "window1" RESOURCE oRes

   DEFINE LABEL oLabTitulo TEXT cLabTitulo ;
          ID "lab_title" RESOURCE oRes

   DEFINE IMAGE oImgBanner ;
          FILE oTPuy:cImages+"banner_02.png"; 
          ID "image1" RESOURCE oRes
          oImgBanner:Adjust(900)

   DEFINE IMAGE oImgLogo ;
          FILE oTPuy:cImages+"fiscalius_logo_02.png";
          ID "image2" RESOURCE oRes
          oImgLogo:Adjust(60)

   DEFINE BOX oBoxData ID "boxdata" RESOURCE oRes


   DEFINE MODEL oModClientes ;
          STRUCT rClientes:Struct() ;
          DATA   rClientes:GetData()
   
   DEFINE LISTBOX oLBoxCli ;
          MODEL oModClientes ;
          OF oBoxData

   oLBoxCli:lBar  := .f.

   if hb_isObject( oEntParent )
      oLBoxCli:bEdit := {|oModel| (cCodCliente := oModel:GetCol(1),; 
                                   iif( !hb_isObject(oWndParent),                ;
                                         .T.,                                     ;
                                         oEntParent:setText( ALLTRIM(cCodCliente)+" - "+;
                                                             oModel:GetCol(3) )), ;
                                   oCliWnd:End() ) }
   else 
      oLBoxCli:bNew  := {|oModel| vtc_edit( oForm, oCliWnd, oModClientes, rVentas, .T. /*lNew*/ ) }
      oLBoxCli:bEdit := {|oModClientes| vtc_edit( oForm, oCliWnd, oModClientes, rVentas, .F. /*lNew*/ ) }
   endif

   ACTIVATE WINDOW oCliWnd MODAL //OF oWndParent

return



procedure vtc_edit( oForm, oCliWnd, oModel, rVentas, lNew )
   local oWnd, oRes, oImgBanner
//   local oImgLogo, oEntCodigo, cCodigo, oEntNombre, cNombre
//   local oEntRif, cRif, oEntMail, cMail, oEntTlf, cTlf
//   local oVtDir, cDir, oBtnSave, oBtnCancel
   local oCliForm, hData

   default lNew := .T.

   SET PUBLIC oCliForm

   oCliForm:lForce   := .F.
   oCliForm:lClose   := .F.     //Bandera para indicar cierre
   oCliForm:oModel   := oModel
   oCliForm:rSession := ::rSession
   oCliForm:rVentas  := rVentas
   oCliForm:lNew     := lNew

   if lNew

      oCliForm:cCodigo  := ""
      oCliForm:cNombre  := ""
      oCliForm:cRif     := ""
      oCliForm:cDir     := ""
      oCliForm:cTlf     := ""
      oCliForm:cMail    := ""
      oCliForm:cCedula  := ""
   else

      oCliForm:cCodigo  := oModel:GetCol( 2 )
      oCliForm:cPreCodigo  := oModel:GetCol( 2 )
      oCliForm:cNombre  := oModel:GetCol( 3 )
      oCliForm:cRif     := oModel:GetCol( 4 )
      oCliForm:cPreRif  := oModel:GetCol( 4 )
      oCliForm:cDir     := oModel:GetCol( 5 )
      oCliForm:cTlf     := oModel:GetCol( 6 )
      oCliForm:cMail    := oModel:GetCol( 7 )
   endif

   oCliForm:rCliente := rVentas:Cliente( {"codigo"=> oCliForm:cCodigo} )

   hData := oCliForm:rCliente:Data()
   oCliForm:cNombreC  := hData["nombre_corto"]
   oCliForm:cCedula   := hData["cedula"]

   SET RESOURCES oRes FROM FILE oTPuy:cResources+"vta_clientes.ui"

   DEFINE WINDOW oCliForm:oWnd TITLE "Pruebas" SIZE 650,350 ;
          OF oCliWnd ;
          ID "window1" RESOURCE oRes

      DEFINE IMAGE oCliForm:oImgBanner ID "img_banner" RESOURCE oRes
      oCliForm:oImgBanner:Adjust(900)

      DEFINE IMAGE oCliForm:oImgLogo   ID "img_logo"   RESOURCE oRes
      oCliForm:oImgLogo:Adjust(60)

      DEFINE ENTRY oCliForm:oEntCodigo VAR oCliForm:cCodigo ;
             VALID iif( oCliForm:lClose, .T., __ValidaCodigo( oCliForm:oEntCodigo, oCliForm ) ) ;
             ID "ent_codigo" RESOURCE oRes

      DEFINE ENTRY oCliForm:oEntNombre VAR oCliForm:cNombre ID "ent_nombre" RESOURCE oRes

      DEFINE ENTRY oCliForm:oEntNombreC VAR oCliForm:cNombreC ID "ent_nombre_corto" RESOURCE oRes

      DEFINE ENTRY oCliForm:oEntCedula VAR oCliForm:cCedula ;
             VALID iif( oCliForm:lClose, .T., __ValidaCedula( oCliForm:oEntCedula ) ) ;
             ID "ent_cedula" RESOURCE oRes

      DEFINE ENTRY oCliForm:oEntRif    VAR oCliForm:cRif    ;
             VALID iif( oCliForm:lClose, .T., __ValidaRIF(oCliForm:oEntRif, oCliForm) ) ;
             ID "ent_rif"    RESOURCE oRes

      DEFINE ENTRY oCliForm:oEntMail   VAR oCliForm:cMail   ;
             VALID iif( oCliForm:lClose, .T., __ValidaEmail( oCliForm:oEntMail ) ) ;
             ID "ent_mail"   RESOURCE oRes

      DEFINE ENTRY oCliForm:oEntTlf    VAR oCliForm:cTlf    ;
             VALID iif( oCliForm:lClose, .T., __ValidaTlf( oCliForm:oEntTlf ) ) ;
             ID "ent_tlf"    RESOURCE oRes

      DEFINE TEXTVIEW oCliForm:oVTDir  VAR oCliForm:cDir    ID "tv_dir"     RESOURCE oRes

      DEFINE BUTTON oCliForm:oBtnSave   ACTION __VtaCliSave( oCliForm ) ID "btn_save" RESOURCE oRes

      DEFINE BUTTON oCliForm:oBtnCancel ACTION ( oCliForm:lClose := .T., oCliForm:oWnd:End() ) ;
             ID "btn_cancel" RESOURCE oRes

   ACTIVATE WINDOW oCliForm:oWnd MODAL VALID __VtaCliExit( oCliForm )

return



Procedure __VtaCliSave( oForm )
   local hData, uWidget, uResp, aIter, lNew

   // Validar el RIF antes de guardar
   if !__ValidaRIF( ::oEntRif, oForm )
      MsgAlert("El RIF ingresado es inválido. Debe tener el formato X-12345678-D (ej. J-12345678-9).", "Error")
      ::oEntRif:SetFocus()
      return
   endif

   // Validar el email antes de guardar
   if !Empty( ::cMail ) .and. !__ValidaEmail( ::oEntMail )
      MsgAlert("El correo electrónico ingresado es inválido. Debe tener el formato usuario@dominio.com.", "Error")
      ::oEntMail:SetFocus()
      return
   endif

   // Validar el número de teléfono antes de guardar
   if !Empty( ::cTlf ) .and. !__ValidaTlf( ::oEntTlf )
      MsgAlert("El número de teléfono debe contener solo dígitos y tener entre 7 y 15 caracteres.", "Error")
      ::oEntTlf:SetFocus()
      return
   endif

   // Validar la cédula antes de guardar
   if !Empty( ::cCedula ) .and. !__ValidaCedula( ::oEntCedula )
      MsgAlert("La cédula debe contener solo dígitos y tener entre 7 y 8 caracteres.", "Error")
      ::oEntCedula:SetFocus()
      return
   endif

   lNew := ::rCliente:isNew()

   // Guardar los datos del cliente
   hData := ::rCliente:Data()
   ::rCliente:SetData( { "codigo"       => ::cCodigo,  ;
                         "nombre"       => ::cNombre,  ;
                         "nombre_corto" => ::cNombreC, ;
                         "rif"          => ::cRif,     ;
                         "email"        => ::cMail,    ;
                         "telefono"     => ::cTlf,     ;
                         "direccion"    => ::cDir,     ;
                         "cedula"       => ::cCedula   ;
                       } )

   uResp := ::rCliente:Save()

   if !(ValType( uResp ) = "L" .and. uResp = .T.)
      MsgAlert("No se pudo guardar el cliente.", "Error")
      return
   endif

   hData := ::rCliente:Data()
//View( hb_valtoexp(hData) )

   // Verificar si es un cliente nuevo (no hay selección en el modelo)
   if lNew 
      // Cliente nuevo: añadir una nueva fila al modelo
      aIter := ARRAY(4)
      APPEND LIST_STORE ::oModel:oLbx ITER aIter ;
             VALUES hData["id"], ;
                    hData["codigo"], ;
                    hData["nombre"], ;
                    hData["rif"], ;
                    hData["direccion"], ;
                    hData["telefono"], ;
                    hData["email"], ;
                    hData["nombre_corto"], ;
                    hData["cedula"]
      // Establecer el cursor en la nueva fila
      gtk_tree_view_set_cursor( ::oModel:oTreeView:pWidget, ::oModel:oTreeView:GetPath( aIter ), NIL, .F. )
   else
      // Cliente existente: actualizar la fila seleccionada
      ::oModel:SetValue( 2, hData["codigo"] )
      ::oModel:SetValue( 3, hData["nombre"] )
      ::oModel:SetValue( 4, hData["rif"] )
      ::oModel:SetValue( 5, hData["direccion"] )
      ::oModel:SetValue( 6, hData["telefono"] )
      ::oModel:SetValue( 7, hData["email"] )
      ::oModel:SetValue( 8, hData["nombre_corto"] ) // Añadir nombre_corto
      ::oModel:SetValue( 9, hData["cedula"] )       // Añadir cedula
   endif

   // Actualizar los campos del formulario
/*
   ::oEntCodigo:SetValue( hData["codigo"] )
   ::oEntNombre:SetValue( hData["nombre"] )
   ::oEntNombreC:SetValue( hData["nombre_corto"] )
   ::oEntCedula:SetValue( hb_ntos(hData["cedula"]) )
   ::oEntRif:SetValue( hData["rif"] )
   ::oEntMail:SetValue( hData["email"] )
   ::oEntTlf:SetValue( hData["telefono"] )
   ::oVTDir:SetValue( hData["direccion"] )
*/
   ::lForce := .T.
   ::oWnd:End()

return



Function __ValidaCodigo( oEntCodigo, oForm )
   local cCodigo, rCliente

   cCodigo := oEntCodigo:GetValue()

   // No Permitir código vacío 
   if Empty( cCodigo )
      MsgAlert( "Debe indicar un código para este cliente.", "Atención" )
      return .F.
   endif

   // Verificar longitud (3 a 15 dígitos)
   if LEN( cCodigo ) < 3 .OR. LEN( cCodigo ) > 15
      MsgAlert("El código debe tener entre 3 y 15 dígitos.", "Error")
      oEntCodigo:SetFocus()
      return .F.
   endif

   rCliente := ::rVentas:Clientes( {"codigo" => cCodigo } )

   if rCliente:RecCount()>0 .and. ( ::lNew .or. cCodigo!=::cPreCodigo )
      MsgAlert( "El código ingresado ya está registrado", "Atención" )
      Return .F.
   endif

   return .T.




Function __ValidaRIF( oEntRif, oForm )
   local cCleanRif, cTipo, cNumero, cCheckDigit
   local cRif, rEntidad, rVentas

   cRif := oEntRif:GetValue()
   // Normalizar: eliminar guiones y convertir a mayúsculas
   cCleanRif := UPPER( STRTRAN( cRif, "-", "" ) )

   // Verificar longitud (9 caracteres: 1 tipo + 8 dígitos)
   if LEN( cCleanRif ) != 10
      MsgAlert( "Longitud del rif es incorrecta" )
      oEntRif:SetFocus()
      return .F.
   endif

   // Verificar tipo de contribuyente (V, E, J, P, G)
   cTipo := LEFT( cCleanRif, 1 )
   if ! ( cTipo $ "VEJPG" )
      MsgAlert( "Tipo de contribuyente es incorrecta" )
      oEntRif:SetFocus()
      return .F.
   endif

   // Verificar que los caracteres 2 al 8 sean dígitos
   cNumero := SUBSTR( cCleanRif, 2, 7 )
   if ! IsDigit( cNumero )
      MsgAlert( "Los valores en el rif son incorrectos" )
      oEntRif:SetFocus()
      return .F.
   endif

   // Verificar que el dígito de chequeo sea un dígito
   cCheckDigit := RIGHT( cCleanRif, 1 )
   if ! IsDigit( cCheckDigit )
      MsgAlert( "Digito verificador es incorrecto" )
      oEntRif:SetFocus()
      return .F.
   endif

   // Nota: No se implementa validación del dígito de chequeo por falta de algoritmo específico
   // Si se proporciona el algoritmo (e.g., módulo 11), se puede añadir aquí

   rEntidad := ::rSession:Entidad( {"rif" => cCleanRif } )
   rVentas := ::rVentas:Clientes( {"rif" => cCleanRif } )
   if ::lNew
      // Hay que buscar si el cliente con este rif ya existe e informar y cancelar.
      if rVentas:RecCount() = 1
         MsgAlert( "Este cliente ya está registrado " )
         RETURN .F.
      endif
      if rEntidad:RecCount = 1
         ::oEntNombre:SetText( rEntidad:nombre )
         ::oEntNombreC:SetText( rEntidad:nombre_corto )
         ::oVTDir:setText( rEntidad:direccion ) 
         ::oEntTlf:SetText( rEntidad:telefono )
         ::oEntMail:SetText( rEntidad:email )
         ::oEntCedula:SetText( rEntidad:cedula )
      endif
   else
      if rEntidad:RecCount() = 1 .and. ::cPreRif != ::cRif
         ::oEntRif:SetText( ::cPreRif )
         MsgAlert( "Este cliente ya está registrado " )
         RETURN .F.
      endif
   endif

   return .T.



Function __ValidaEmail( oEntMail )
   local cMailLower, nAtPos, nDotPos
   local cValidChars := "abcdefghijklmnopqrstuvwxyz0123456789.-_@"
   local i, cMail

   cMail := oEntMail:GetValue()

   // Permitir email vacío (opcional)
   if Empty( cMail )
      return .T.
   endif

   // Convertir a minúsculas para simplificar validación
   cMailLower := LOWER( cMail )

   // Verificar longitud (mínimo 5, máximo 100 caracteres)
   if LEN( cMailLower ) < 5 .OR. LEN( cMailLower ) > 100
      MsgAlert("El correo electrónico debe tener entre 5 y 100 caracteres.", "Error")
      oEntMail:SetFocus()
      return .F.
   endif

   // Verificar presencia de exactamente un @
   nAtPos := AT( "@", cMailLower )
   if nAtPos == 0 .OR. AT( "@", SUBSTR( cMailLower, nAtPos + 1 ) ) > 0
      MsgAlert("El correo electrónico debe contener exactamente un símbolo @.", "Error")
      oEntMail:SetFocus()
      return .F.
   endif

   // Verificar presencia de al menos un punto después del @
   nDotPos := AT( ".", SUBSTR( cMailLower, nAtPos + 1 ) )
   if nDotPos == 0
      MsgAlert("El correo electrónico debe contener un dominio con extensión (ej. .com).", "Error")
      oEntMail:SetFocus()
      return .F.
   endif

   // Verificar que no haya puntos consecutivos ni al inicio/final de la parte local
   if AT( "..", cMailLower ) > 0 .OR. LEFT( cMailLower, 1 ) == "." .OR. SUBSTR( cMailLower, nAtPos - 1, 1 ) == "."
      MsgAlert("El correo electrónico no puede contener puntos consecutivos ni empezar/terminar con un punto antes del @.", "Error")
      oEntMail:SetFocus()
      return .F.
   endif

   // Verificar caracteres básicos permitidos (letras, números, puntos, guiones, guiones bajos)
   for i := 1 TO LEN( cMailLower )
      if ! ( SUBSTR( cMailLower, i, 1 ) $ cValidChars )
         MsgAlert("El correo electrónico contiene caracteres no permitidos.", "Error")
         oEntMail:SetFocus()
         return .F.
      endif
   next

   return .T.



Function __ValidaTlf( oEntTlf )
   local cPhone

   cPhone := oEntTlf:GetValue()

   // Permitir teléfono vacío (opcional)
   if Empty( cPhone )
      return .T.
   endif

   // Verificar que solo contenga dígitos
   if ! IsDigit( cPhone )
      MsgAlert("El número de teléfono debe contener solo dígitos.", "Error")
      oEntTlf:SetFocus()
      return .F.
   endif

   // Verificar longitud (7 a 15 dígitos)
   if LEN( cPhone ) < 7 .OR. LEN( cPhone ) > 15
      MsgAlert("El número de teléfono debe tener entre 7 y 15 dígitos.", "Error")
      oEntTlf:SetFocus()
      return .F.
   endif

   return .T.



Function __ValidaCedula( oEntCedula )
   local cCedula

   cCedula := oEntCedula:GetValue()

   // Permitir cédula vacía (opcional)
   if Empty( cCedula )
      return .T.
   endif

   // Verificar que solo contenga dígitos
   if ! IsDigit( cCedula )
      MsgAlert("La cédula debe contener solo dígitos.", "Error")
      oEntCedula:SetFocus()
      return .F.
   endif

   // Verificar longitud (7 a 8 dígitos)
   if LEN( cCedula ) < 7 .OR. LEN( cCedula ) > 8
      MsgAlert("La cédula debe tener entre 7 y 8 dígitos.", "Error")
      oEntCedula:SetFocus()
      return .F.
   endif

   return .T.



Function __VtaCliExit( oForm )

  ::lClose := .T. //Activar bandera de cierre antes de validar salida
//View( ::lForce )
  if ::lForce; return .T. ; endif

  if MsgNoYes("¿Desea salir y descartar los cambios?", "Atención.")
     return .T.
  endif

return .F.

//eof
